From d9cbb04226cdddf911cdbc7cdeb615567b7b2522 Mon Sep 17 00:00:00 2001
From: Radostan Riedel <raybuntu@googlemail.com>
Date: Fri, 21 Sep 2018 08:54:21 +0200
Subject: [PATCH 1/1] Use buildid as version for useragent

---
 xbmc/utils/SystemInfo.cpp | 133 +---------------------------------------------
 1 file changed, 1 insertion(+), 132 deletions(-)

diff --git a/xbmc/utils/SystemInfo.cpp b/xbmc/utils/SystemInfo.cpp
index c8bd4e2dff..bf6235ea39 100644
--- a/xbmc/utils/SystemInfo.cpp
+++ b/xbmc/utils/SystemInfo.cpp
@@ -1052,138 +1052,7 @@ std::string CSysInfo::GetUserAgent()
   if (!result.empty())
     return result;
 
-  result = GetAppName() + "/" + CSysInfo::GetVersionShort() + " (";
-#if defined(TARGET_WINDOWS)
-  result += GetKernelName() + " " + GetKernelVersion();
-#ifndef TARGET_WINDOWS_STORE
-  BOOL bIsWow = FALSE;
-  if (IsWow64Process(GetCurrentProcess(), &bIsWow) && bIsWow)
-      result.append("; WOW64");
-  else
-#endif
-  {
-    SYSTEM_INFO si = {};
-    GetSystemInfo(&si);
-    if (si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64)
-      result.append("; Win64; x64");
-    else if (si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_IA64)
-      result.append("; Win64; IA64");
-    else if (si.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_ARM)
-      result.append("; ARM");
-  }
-#elif defined(TARGET_DARWIN)
-#if defined(TARGET_DARWIN_IOS)
-  std::string iDevStr(GetModelName()); // device model name with number of model version
-  size_t iDevStrDigit = iDevStr.find_first_of("0123456789");
-  std::string iDev(iDevStr, 0, iDevStrDigit);  // device model name without number
-  if (iDevStrDigit == 0)
-    iDev = "unknown";
-  result += iDev + "; ";
-  std::string iOSVersion(GetOsVersion());
-  size_t lastDotPos = iOSVersion.rfind('.');
-  if (lastDotPos != std::string::npos && iOSVersion.find('.') != lastDotPos
-      && iOSVersion.find_first_not_of('0', lastDotPos + 1) == std::string::npos)
-    iOSVersion.erase(lastDotPos);
-  StringUtils::Replace(iOSVersion, '.', '_');
-  if (iDev == "iPad" || iDev == "AppleTV")
-    result += "CPU OS ";
-  else
-    result += "CPU iPhone OS ";
-  result += iOSVersion + " like Mac OS X";
-#else
-  result += "Macintosh; ";
-  std::string cpuFam(GetBuildTargetCpuFamily());
-  if (cpuFam == "x86")
-    result += "Intel ";
-  else if (cpuFam == "PowerPC")
-    result += "PPC ";
-  result += "Mac OS X ";
-  std::string OSXVersion(GetOsVersion());
-  StringUtils::Replace(OSXVersion, '.', '_');
-  result += OSXVersion;
-#endif
-#elif defined(TARGET_ANDROID)
-  result += "Linux; Android ";
-  std::string versionStr(GetOsVersion());
-  const size_t verLen = versionStr.length();
-  if (verLen >= 2 && versionStr.compare(verLen - 2, 2, ".0", 2) == 0)
-    versionStr.erase(verLen - 2); // remove last ".0" if any
-  result += versionStr;
-  std::string deviceInfo(GetModelName());
-
-  char buildId[PROP_VALUE_MAX];
-  int propLen = __system_property_get("ro.build.id", buildId);
-  if (propLen > 0 && propLen <= PROP_VALUE_MAX)
-  {
-    if (!deviceInfo.empty())
-      deviceInfo += " ";
-    deviceInfo += "Build/";
-    deviceInfo.append(buildId, propLen);
-  }
-
-  if (!deviceInfo.empty())
-    result += "; " + deviceInfo;
-#elif defined(TARGET_POSIX)
-  result += "X11; ";
-  struct utsname un;
-  if (uname(&un) == 0)
-  {
-    std::string cpuStr(un.machine);
-    if (cpuStr == "x86_64" && GetXbmcBitness() == 32)
-      cpuStr = "i686 (x86_64)";
-    result += un.sysname;
-    result += " ";
-    result += cpuStr;
-  }
-  else
-    result += "Unknown";
-#else
-  result += "Unknown";
-#endif
-  result += ")";
-
-  if (GetAppName() != "Kodi")
-    result += " Kodi_Fork_" + GetAppName() + "/1.0"; // default fork number is '1.0', replace it with actual number if necessary
-
-#ifdef TARGET_LINUX
-  // Add distribution name
-  std::string linuxOSName(GetOsName(true));
-  if (!linuxOSName.empty())
-    result += " " + linuxOSName + "/" + GetOsVersion();
-#endif
-
-#ifdef TARGET_RASPBERRY_PI
-  result += " HW_RaspberryPi/1.0";
-#elif defined (TARGET_DARWIN_IOS)
-  std::string iDevVer;
-  if (iDevStrDigit == std::string::npos)
-    iDevVer = "0.0";
-  else
-    iDevVer.assign(iDevStr, iDevStrDigit, std::string::npos);
-  StringUtils::Replace(iDevVer, ',', '.');
-  result += " HW_" + iDev + "/" + iDevVer;
-#endif
-  // add more device IDs here if needed.
-  // keep only one device ID in result! Form:
-  // result += " HW_" + "deviceID" + "/" + "1.0"; // '1.0' if device has no version
-
-#if defined(TARGET_ANDROID)
-  // Android has no CPU string by default, so add it as additional parameter
-  struct utsname un1;
-  if (uname(&un1) == 0)
-  {
-    std::string cpuStr(un1.machine);
-    StringUtils::Replace(cpuStr, ' ', '_');
-    result += " Sys_CPU/" + cpuStr;
-  }
-#endif
-
-  result += " App_Bitness/" + StringUtils::Format("%d", GetXbmcBitness());
-
-  std::string fullVer(CSysInfo::GetVersion());
-  StringUtils::Replace(fullVer, ' ', '-');
-  result += " Version/" + fullVer;
-
+  result = "Kodi_Fork (Linux; " + getValueFromOs_release("NAME") + " " + getValueFromOs_release("BUILD_ID") + ")";
   return result;
 }
 
-- 
2.11.0

